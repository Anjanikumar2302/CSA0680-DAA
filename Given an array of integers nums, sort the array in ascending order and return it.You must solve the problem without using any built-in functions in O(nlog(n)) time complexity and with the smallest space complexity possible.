#include <stdio.h>

// Function to swap two elements
void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function for QuickSort
int partition(int nums[], int low, int high) {
    int pivot = nums[high];  // Choosing the last element as the pivot
    int i = (low - 1);  // Index of smaller element

    for (int j = low; j <= high - 1; j++) {
        // If current element is smaller than or equal to pivot
        if (nums[j] <= pivot) {
            i++;  // Increment index of smaller element
            swap(&nums[i], &nums[j]);
        }
    }
    swap(&nums[i + 1], &nums[high]);
    return (i + 1);
}

// QuickSort function
void quickSort(int nums[], int low, int high) {
    if (low < high) {
        // Partition the array and get the pivot index
        int pi = partition(nums, low, high);

        // Recursively sort elements before and after partition
        quickSort(nums, low, pi - 1);
        quickSort(nums, pi + 1, high);
    }
}

// Function to print an array
void printArray(int nums[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", nums[i]);
    }
    printf("\n");
}

int main() {
    int nums[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(nums) / sizeof(nums[0]);
    printf("Original array: ");
    printArray(nums, n);

    quickSort(nums, 0, n - 1);

    printf("Sorted array: ");
    printArray(nums, n);
    return 0;
}
